<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Cmake用法</title>
    <url>/2020/01/09/Cmake%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h2 id="Cmake基本用法"><a href="#Cmake基本用法" class="headerlink" title="Cmake基本用法"></a>Cmake基本用法</h2><ul>
<li>CMAKE_MINIMUM_REQUIRED(VERSION 2.8.3)</li>
</ul>
<blockquote>
<p>指定Cmake最低版本需求 2.83</p>
</blockquote>
<ul>
<li>project(&lt;PROJECT-NAME&gt;)</li>
</ul>
<blockquote>
<p>指定项目名称  例如：PROJECT(hello)</p>
</blockquote>
<ul>
<li>AUX_SOURCE_DIRECTORY(&lt;dir&gt;   &lt;variable&gt;)<blockquote>
<p>添加某路径下的所有源文件，并将该路径用变量来表示</p>
</blockquote>
</li>
</ul>
<ul>
<li>ADD_EXECUTABLE(生成可执行文件的名字  变量)<blockquote>
<p>ADD_EXECUTABLE(hello ${SRC_LIST})<br>将变量SRC_LIST表示路径下源文件编译，并生成可执行文件hello</p>
</blockquote>
</li>
</ul>
<h2 id="同一目录，多文件"><a href="#同一目录，多文件" class="headerlink" title="同一目录，多文件"></a>同一目录，多文件</h2><blockquote>
<p>./Demo<br>|<br>+—-main.cc<br>|<br>+—-function.c<br>|<br>+—-function.h</p>
</blockquote>
<p>这种CmakeLists.txt写法如下：</p>
<blockquote>
<p>CMAKE_MINIMUM_REQUIRED(VERSION 2.8.3)<br>project(Demo)<br>AUX_SOURCE_DIRECTORY(./Demo  SRC)<br>ADD_EXECUTABLE(function ${SRC})</p>
</blockquote>
<h2 id="多目录，多文件"><a href="#多目录，多文件" class="headerlink" title="多目录，多文件"></a>多目录，多文件</h2><blockquote>
<p>./Demo<br>|<br>+—main.cc<br>|<br>+—function/<br>|<br>+—function.cc<br>|<br>+—function.h</p>
</blockquote>
<p>主目录 CmakeLists.txt写法如下：</p>
<blockquote>
<p>CMAKE_MINIMUM_REQUIRED(VERSION 2.8.3)<br>PROJECT(Demo)<br>AUX_SOURCE_DIRECTORY(./Demo SRC)<br>subdirectory(function)<br>ADD_EXECUTABLE(Demo ${SRC})</p>
</blockquote>
<p>子目录 CmakeLists.txt写法如下：</p>
<blockquote>
<p>AUX_SOURCE_DIRECTORY(. SUB_SRC)</p>
</blockquote>
<ul>
<li>find_package<pre class="line-numbers language-C"><code class="language-C">原型 ：find_package(<package> [version] [EXACT] [QUIET] [MODULE]
          [REQUIRED] [[COMPONENTS] [components...]]
          [OPTIONAL_COMPONENTS components...]
          [NO_POLICY_SCOPE])
<package>   :指定查找的软件包
[QUIET]     :如果找不到软件包，该选项将禁用警告消息
[MODULE]    :禁用下面记录的第二个签名
[REQUIRED]  :其含义是指是否是工程必须的，表示如果没有找到的
            话，cmake的过程会终止，并发出警告信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<pre><code>          但指定了COMPONENTS选项，在它们的后面可以列出一包
          相关(依赖)的部件清单。</code></pre><p>示例 ： find_package(Protobuf REQUIRED)</p>
<pre><code>
+ target_link_libraries
```c
原型： target_link_libraries(&lt;target&gt; [item1] [item2] [...]
                         [[debug|optimized|general] &lt;item&gt;] ...)
用法： target_link_libraries(projectname  Libname);</code></pre><ul>
<li>find_package 和 target_link_libraries示例<pre class="line-numbers language-C"><code class="language-C">cmake_minimum_required(VERSION 2.8.3)
project(VMSClient)
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ul>
<p>set(CMAKE_AUTOMOC ON)<br>set(CMAKE_BUILD_TYPE RELEASE)</p>
<p>find_package(catkin REQUIRED COMPONENTS<br>        roscpp<br>        sensor_msgs<br>        std_msgs<br>        aisimba_msgs<br>        )</p>
<p>catkin_package()</p>
<p>find_package(Qt5Widgets REQUIRED)<br>find_package(Qt5Core REQUIRED)<br>find_package(Qt5Gui REQUIRED)<br>find_package(Qt5WebSockets REQUIRED)<br>find_package(Qt5Network REQUIRED)<br>find_package(Protobuf REQUIRED)</p>
<p>if (PROTOBUF_FOUND)<br>    message(STATUS “protobuf library found”)<br>else ()<br>    message(FATAL_ERROR “protobuf library is needed but cant be found”)<br>endif ()</p>
<p>include_directories(<br>        include<br>        ${catkin_INCLUDE_DIRS}<br>)</p>
<p>include_directories(${PROTOBUF_INCLUDE_DIRS})<br>include_directories(${PROJECT_SOURCE_DIR}/include)<br>include_directories(${PROJECT_SOURCE_DIR}/proto_src)</p>
<p>file(GLOB_RECURSE SRC src/<em>.c src/</em>.cpp proto_src/<em>.cc)<br>file(GLOB_RECURSE INC include/</em>.h include/<em>.hpp proto_src/</em>.h)</p>
<p>add_executable(${PROJECT_NAME}_node ${INC} ${SRC})<br>add_definitions(-std=c++11 -g -O3 -Wno-deprecated -Wno-dev)<br>add_dependencies(${PROJECT_NAME}_node ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})</p>
<p>target_link_libraries(${PROJECT_NAME}_node<br>        ${catkin_LIBRARIES}<br>        ${PROTOBUF_LIBRARIES}<br>        Qt5::Widgets<br>        Qt5::Core<br>        Qt5::Gui<br>        Qt5::WebSockets<br>        Qt5::Network<br>        glog<br>        )</p>
<pre><code></code></pre>]]></content>
      <categories>
        <category>Cmake</category>
      </categories>
      <tags>
        <tag>自动化管理工程</tag>
      </tags>
  </entry>
  <entry>
    <title>【Emwin】显示字体(一)</title>
    <url>/2020/01/09/%E3%80%90Emwin%E3%80%91%E6%98%BE%E7%A4%BA%E5%AD%97%E4%BD%93(%E4%B8%80)/</url>
    <content><![CDATA[<h2 id="官方demo"><a href="#官方demo" class="headerlink" title="官方demo"></a>官方demo</h2><pre class="line-numbers language-C"><code class="language-C">#include "GUI.h"

#define RECOMMENDED_MEMPRY (1024L * 5)

void MainTask(void)
{
    int xPos;
    int yPos;
    int xSize;
    int i;
    i = 0;

    GUI_Init();

    if (GUI_ALLOC_GetNumFreeBytes() < RECOMMENDED_MEMPRY)
    {
        GUI_ErrorOut("not enough memory available");
        return;
    }

    xPos = LCD_GetXSize() / 2;
    yPos = LCD_GetYSize() / 2;

    GUI_SetTextMode(GUI_TM_REV);
    GUI_SetFont(GUI_FONT_20F_ASCII);
    GUI_DispStringHCenterAt("Hello world!", xPos, yPos);

    GUI_SetFont(GUI_FONT_D24X32);
    xSize = GUI_GetStringDistX("0000");
    xPos -= xSize / 2;
    yPos += 24 + 10;

    while (1)
    {
        GUI_DispDecAt(i ++, xPos, yPos, 4);
        if (i > 9999)
        {
            i = 0;
        }
    }

}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="函数说明"><a href="#函数说明" class="headerlink" title="函数说明"></a>函数说明</h2><ul>
<li>GUI_SetTextMode</li>
</ul>
<blockquote>
<p>原    型：int GUI_SetTextMode(int TextMode)<br>函数说明：设置文本模式<br>参    数：<br>      GUI_TEXTMODE_NORMAL      文本正常显示。这是默认设置;这个值等于0<br>       GUI_TEXTMODE_REV         文本反向显示。(实测背景色相反)<br>       GUI_TEXTMODE_TRANS       文本显示为透明<br>       GUI_TEXTMODE_XOR         文本反转背景</p>
</blockquote>
<ul>
<li>GUI_SetFont</li>
</ul>
<blockquote>
<p>原    型：const GUI_FONT * GUI_SetFont(const GUI_FONT * pNewFont)<br>函数说明：设置用于文本输出的字体<br>参    数：<br>         pNewFont:指向要选择和使用的字体的指针,例如GUI_FONT_20F_ASCII</p>
</blockquote>
<ul>
<li>GUI_DispStringHCenterAt</li>
</ul>
<blockquote>
<p>原    型：void GUI_DispStringHCenterAt(const char * s, int x, int y);<br>函数说明：显示作为参数传递的字符串在指定位置水平居中在当前窗口中使用当前字体<br>参    数：<br>        s:要显示的字符串<br>        x:显示位置横坐标<br>        y:显示位置纵坐标</p>
</blockquote>
<ul>
<li>GUI_GetStringDistX</li>
</ul>
<blockquote>
<p>原    型：int GUI_GetStringDistX(const char * s);<br>函数说明：返回用于以当前选定字体显示指定字符串的X-size<br>参    数：<br>        s:指定字符串</p>
</blockquote>
<ul>
<li>GUI_DispDecAt</li>
</ul>
<blockquote>
<p>原    型：void GUI_DispDecAt(I32 v, I16P x, I16P y, U8 Len);<br>函数说明：以十进制形式显示具有指定字符数的值，使用当前字体在当前窗口中的位置。<br>参    数：<br>        v  :显示的十进制的值<br>        x  :显示位置的横坐标<br>        y  :显示位置的纵坐标<br>        len:显示的最大位数</p>
</blockquote>
]]></content>
      <categories>
        <category>Emwin</category>
      </categories>
      <tags>
        <tag>GUI</tag>
      </tags>
  </entry>
  <entry>
    <title>【Emwin】测试屏幕demo</title>
    <url>/2020/01/09/%E3%80%90Emwin%E3%80%91%E6%B5%8B%E8%AF%95%E5%B1%8F%E5%B9%95demo/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/01/09/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
