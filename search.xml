<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Cmake用法</title>
    <url>/2020/01/09/Cmake%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h2 id="Cmake基本用法"><a href="#Cmake基本用法" class="headerlink" title="Cmake基本用法"></a>Cmake基本用法</h2><ul>
<li>CMAKE_MINIMUM_REQUIRED(VERSION 2.8.3)</li>
</ul>
<blockquote>
<p>指定Cmake最低版本需求 2.83</p>
</blockquote>
<ul>
<li>project(&lt;PROJECT-NAME&gt;)</li>
</ul>
<blockquote>
<p>指定项目名称  例如：PROJECT(hello)</p>
</blockquote>
<ul>
<li>AUX_SOURCE_DIRECTORY(&lt;dir&gt;   &lt;variable&gt;)<blockquote>
<p>添加某路径下的所有源文件，并将该路径用变量来表示</p>
</blockquote>
</li>
</ul>
<ul>
<li>ADD_EXECUTABLE(生成可执行文件的名字  变量)<blockquote>
<p>ADD_EXECUTABLE(hello ${SRC_LIST})<br>将变量SRC_LIST表示路径下源文件编译，并生成可执行文件hello</p>
</blockquote>
</li>
</ul>
<h2 id="同一目录，多文件"><a href="#同一目录，多文件" class="headerlink" title="同一目录，多文件"></a>同一目录，多文件</h2><blockquote>
<p>./Demo<br>|<br>+—-main.cc<br>|<br>+—-function.c<br>|<br>+—-function.h</p>
</blockquote>
<p>这种CmakeLists.txt写法如下：</p>
<blockquote>
<p>CMAKE_MINIMUM_REQUIRED(VERSION 2.8.3)<br>project(Demo)<br>AUX_SOURCE_DIRECTORY(./Demo  SRC)<br>ADD_EXECUTABLE(function ${SRC})</p>
</blockquote>
<h2 id="多目录，多文件"><a href="#多目录，多文件" class="headerlink" title="多目录，多文件"></a>多目录，多文件</h2><blockquote>
<p>./Demo<br>|<br>+—main.cc<br>|<br>+—function/<br>|<br>+—function.cc<br>|<br>+—function.h</p>
</blockquote>
<p>主目录 CmakeLists.txt写法如下：</p>
<blockquote>
<p>CMAKE_MINIMUM_REQUIRED(VERSION 2.8.3)<br>PROJECT(Demo)<br>AUX_SOURCE_DIRECTORY(./Demo SRC)<br>subdirectory(function)<br>ADD_EXECUTABLE(Demo ${SRC})</p>
</blockquote>
<p>子目录 CmakeLists.txt写法如下：</p>
<blockquote>
<p>AUX_SOURCE_DIRECTORY(. SUB_SRC)</p>
</blockquote>
<ul>
<li><p>find_package</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">原型 ：find_package(&lt;package&gt; [version] [EXACT] [QUIET] [MODULE]</span><br><span class="line">            [REQUIRED] [[COMPONENTS] [components...]]</span><br><span class="line">            [OPTIONAL_COMPONENTS components...]</span><br><span class="line">            [NO_POLICY_SCOPE])</span><br><span class="line"> &lt;package&gt;   :指定查找的软件包</span><br><span class="line"> [QUIET]     :如果找不到软件包，该选项将禁用警告消息</span><br><span class="line"> [MODULE]    :禁用下面记录的第二个签名</span><br><span class="line"> [REQUIRED]  :其含义是指是否是工程必须的，表示如果没有找到的</span><br><span class="line">              话，cmake的过程会终止，并发出警告信息</span><br><span class="line"> [COMPONENTS]:在REQUIRED选项之后，或者如果没有指定REQUIRED选项</span><br><span class="line">              但指定了COMPONENTS选项，在它们的后面可以列出一包</span><br><span class="line">              相关(依赖)的部件清单。</span><br><span class="line">示例 ： find_package(Protobuf REQUIRED)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>target_link_libraries</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">原型： target_link_libraries(&lt;target&gt; [item1] [item2] [...]</span><br><span class="line">                         [[debug|optimized|general] &lt;item&gt;] ...)</span><br><span class="line">用法： target_link_libraries(projectname  Libname);</span><br></pre></td></tr></table></figure></div></li>
<li><p>find_package 和 target_link_libraries示例</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION <span class="number">2.8</span><span class="number">.3</span>)</span><br><span class="line">project(VMSClient)</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>(CMAKE_AUTOMOC ON)</span><br><span class="line"><span class="built_in">set</span>(CMAKE_BUILD_TYPE RELEASE)</span><br><span class="line"></span><br><span class="line">find_package(catkin REQUIRED COMPONENTS</span><br><span class="line">        roscpp</span><br><span class="line">        sensor_msgs</span><br><span class="line">        std_msgs</span><br><span class="line">        aisimba_msgs</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">catkin_package()</span><br><span class="line"></span><br><span class="line">find_package(Qt5Widgets REQUIRED)</span><br><span class="line">find_package(Qt5Core REQUIRED)</span><br><span class="line">find_package(Qt5Gui REQUIRED)</span><br><span class="line">find_package(Qt5WebSockets REQUIRED)</span><br><span class="line">find_package(Qt5Network REQUIRED)</span><br><span class="line">find_package(Protobuf REQUIRED)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (PROTOBUF_FOUND)</span><br><span class="line">    message(STATUS <span class="string">"protobuf library found"</span>)</span><br><span class="line"><span class="keyword">else</span> ()</span><br><span class="line">    message(FATAL_ERROR <span class="string">"protobuf library is needed but cant be found"</span>)</span><br><span class="line">endif ()</span><br><span class="line"></span><br><span class="line">include_directories(</span><br><span class="line">        include</span><br><span class="line">        $&#123;catkin_INCLUDE_DIRS&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">include_directories($&#123;PROTOBUF_INCLUDE_DIRS&#125;)</span><br><span class="line">include_directories($&#123;PROJECT_SOURCE_DIR&#125;/include)</span><br><span class="line">include_directories($&#123;PROJECT_SOURCE_DIR&#125;/proto_src)</span><br><span class="line"></span><br><span class="line">file(GLOB_RECURSE SRC src<span class="comment">/*.c src/*.cpp proto_src/*.cc)</span></span><br><span class="line"><span class="comment">file(GLOB_RECURSE INC include/*.h include/*.hpp proto_src/*.h)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">add_executable($&#123;PROJECT_NAME&#125;_node $&#123;INC&#125; $&#123;SRC&#125;)</span></span><br><span class="line"><span class="comment">add_definitions(-std=c++11 -g -O3 -Wno-deprecated -Wno-dev)</span></span><br><span class="line"><span class="comment">add_dependencies($&#123;PROJECT_NAME&#125;_node $&#123;$&#123;PROJECT_NAME&#125;_EXPORTED_TARGETS&#125; $&#123;catkin_EXPORTED_TARGETS&#125;)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">target_link_libraries($&#123;PROJECT_NAME&#125;_node</span></span><br><span class="line"><span class="comment">        $&#123;catkin_LIBRARIES&#125;</span></span><br><span class="line"><span class="comment">        $&#123;PROTOBUF_LIBRARIES&#125;</span></span><br><span class="line"><span class="comment">        Qt5::Widgets</span></span><br><span class="line"><span class="comment">        Qt5::Core</span></span><br><span class="line"><span class="comment">        Qt5::Gui</span></span><br><span class="line"><span class="comment">        Qt5::WebSockets</span></span><br><span class="line"><span class="comment">        Qt5::Network</span></span><br><span class="line"><span class="comment">        glog</span></span><br><span class="line"><span class="comment">        )</span></span><br></pre></td></tr></table></figure></div>
</li>
</ul>
]]></content>
      <categories>
        <category>Cmake</category>
      </categories>
      <tags>
        <tag>自动化管理工程</tag>
      </tags>
  </entry>
  <entry>
    <title>【Emwin】显示字体(一)</title>
    <url>/2020/01/09/%E3%80%90Emwin%E3%80%91%E6%98%BE%E7%A4%BA%E5%AD%97%E4%BD%93(%E4%B8%80)/</url>
    <content><![CDATA[<h2 id="官方demo"><a href="#官方demo" class="headerlink" title="官方demo"></a>官方demo</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"GUI.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RECOMMENDED_MEMPRY (1024L * 5)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainTask</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> xPos;</span><br><span class="line">	<span class="keyword">int</span> yPos;</span><br><span class="line">	<span class="keyword">int</span> xSize;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	GUI_Init();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (GUI_ALLOC_GetNumFreeBytes() &lt; RECOMMENDED_MEMPRY)</span><br><span class="line">	&#123;</span><br><span class="line">		GUI_ErrorOut(<span class="string">"not enough memory available"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	xPos = LCD_GetXSize() / <span class="number">2</span>;</span><br><span class="line">	yPos = LCD_GetYSize() / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">	GUI_SetTextMode(GUI_TM_REV);</span><br><span class="line">	GUI_SetFont(GUI_FONT_20F_ASCII);</span><br><span class="line">	GUI_DispStringHCenterAt(<span class="string">"Hello world!"</span>, xPos, yPos);</span><br><span class="line"></span><br><span class="line">	GUI_SetFont(GUI_FONT_D24X32);</span><br><span class="line">	xSize = GUI_GetStringDistX(<span class="string">"0000"</span>);</span><br><span class="line">	xPos -= xSize / <span class="number">2</span>;</span><br><span class="line">	yPos += <span class="number">24</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		GUI_DispDecAt(i ++, xPos, yPos, <span class="number">4</span>);</span><br><span class="line">		<span class="keyword">if</span> (i &gt; <span class="number">9999</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			i = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="函数说明"><a href="#函数说明" class="headerlink" title="函数说明"></a>函数说明</h2><ul>
<li>GUI_SetTextMode</li>
</ul>
<blockquote>
<p>原    型：int GUI_SetTextMode(int TextMode)<br>函数说明：设置文本模式<br>参    数：<br>      GUI_TEXTMODE_NORMAL      文本正常显示。这是默认设置;这个值等于0<br>       GUI_TEXTMODE_REV         文本反向显示。(实测背景色相反)<br>       GUI_TEXTMODE_TRANS       文本显示为透明<br>       GUI_TEXTMODE_XOR         文本反转背景</p>
</blockquote>
<ul>
<li>GUI_SetFont</li>
</ul>
<blockquote>
<p>原    型：const GUI_FONT * GUI_SetFont(const GUI_FONT * pNewFont)<br>函数说明：设置用于文本输出的字体<br>参    数：<br>         pNewFont:指向要选择和使用的字体的指针,例如GUI_FONT_20F_ASCII</p>
</blockquote>
<ul>
<li>GUI_DispStringHCenterAt</li>
</ul>
<blockquote>
<p>原    型：void GUI_DispStringHCenterAt(const char * s, int x, int y);<br>函数说明：显示作为参数传递的字符串在指定位置水平居中在当前窗口中使用当前字体<br>参    数：<br>        s:要显示的字符串<br>        x:显示位置横坐标<br>        y:显示位置纵坐标</p>
</blockquote>
<ul>
<li>GUI_GetStringDistX</li>
</ul>
<blockquote>
<p>原    型：int GUI_GetStringDistX(const char * s);<br>函数说明：返回用于以当前选定字体显示指定字符串的X-size<br>参    数：<br>        s:指定字符串</p>
</blockquote>
<ul>
<li>GUI_DispDecAt</li>
</ul>
<blockquote>
<p>原    型：void GUI_DispDecAt(I32 v, I16P x, I16P y, U8 Len);<br>函数说明：以十进制形式显示具有指定字符数的值，使用当前字体在当前窗口中的位置。<br>参    数：<br>        v  :显示的十进制的值<br>        x  :显示位置的横坐标<br>        y  :显示位置的纵坐标<br>        len:显示的最大位数</p>
</blockquote>
]]></content>
      <categories>
        <category>Emwin</category>
      </categories>
      <tags>
        <tag>GUI</tag>
      </tags>
  </entry>
  <entry>
    <title>【Emwin】测试屏幕demo</title>
    <url>/2020/01/09/%E3%80%90Emwin%E3%80%91%E6%B5%8B%E8%AF%95%E5%B1%8F%E5%B9%95demo/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/01/09/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
